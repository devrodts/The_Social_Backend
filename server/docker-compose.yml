services:
  # Banco de dados PostgreSQL
  postgres:
    image: docker.io/postgres:15-alpine
    container_name: social_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - social_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis para cache e sessões
  redis:
    image: docker.io/redis:7-alpine
    container_name: social_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - social_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Aplicação principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: social_app
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      NODE_ENV: production
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_SYNCHRONIZE: "false"
      DATABASE_LOGGING: "false"
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 3000
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - social_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx como reverse proxy
  nginx:
    image: docker.io/nginx:alpine
    container_name: social_nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - social_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  social_network:
    driver: bridge